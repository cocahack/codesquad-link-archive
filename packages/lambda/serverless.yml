service:
  name: codesquad-link-archive
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: false
    packager: 'yarn'
    excludeFiles: src/**/*.test.js

  channelTableName: ${self:provider.stage}-channels
  userTableName: ${self:provider.stage}-users
  linkTableName: ${self:provider.stage}-links

  dynamodb:
    stages:
      - dev
      - test
    start:
      port: 8000
      inMemory: true
      migrate: true
      sharedDb: true

  variables:
    LINK_SECRET: ${env:LINK_SECRET}
    AUTH_SECRET: ${env:AUTH_SECRET}
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    BASE_URL: ${env:BASE_URL}

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-dotenv-plugin
  - serverless-plugin-monorepo
  - serverless-local-schedule
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:REGION}
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    TZ: Asia/Seoul
    NODE_PATH: "./:/opt/node_modules"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

package:
  individually: true

layers:
  dependencies:
    path: ./layer/nodejs
    compatibleRuntimes:
      - nodejs12.x
    package:
      include:
        - node_modules/**

functions:
# Crawler Services
  crawler:
    handler: src/crawler/index.crawl
    timeout: 20
    events:
      - schedule:
          rate: cron(0 4 * * ? *)
          timezone: ${self:provider.environment.TZ}
    environment:
      SLACK_TOKEN: ${self:custom.variables.SLACK_TOKEN}
    layers:
      - { Ref: DependenciesLambdaLayer }

# Auth Services
  register:
    handler: src/services/auth/register.register
    events:
      - http: POST register
    environment:
      LINK_SECRET: ${self:custom.variables.LINK_SECRET}
      SLACK_TOKEN: ${self:custom.variables.SLACK_TOKEN}
    layers:
      - { Ref: DependenciesLambdaLayer }

  enter:
    handler: src/services/auth/enter.enter
    events:
      - http:
          path: /enter
          method: GET
    environment:
      LINK_SECRET: ${self:custom.variables.LINK_SECRET}
      AUTH_SECRET: ${self:custom.variables.AUTH_SECRET}
    layers:
      - { Ref: DependenciesLambdaLayer }

  authorize:
    handler: src/services/auth/authorize.authorize
    environment:
      AUTH_SECRET: ${self:custom.variables.AUTH_SECRET}
    layers:
      - { Ref: DependenciesLambdaLayer }

# API Services
#  userList:
#    handler: src/services/api/user/list.list
#    events:
#      - http:
#          path: /api/users
#          method: GET
#          cors: false
#    layers:
#      - { Ref: DependenciesLambdaLayer }
  hello:
    handler: src/services/handler.hello
    events:
      - http:
          path: /api/hello
          method: GET
          cors: false
    layers:
      - { Ref: DependenciesLambdaLayer }

resources:
  - ${file(resources/dynamodb-table.yml)}
